{
    "type": "object",
    "properties": {
        "Action": {
            "required": true,
            "type": "string"
        },
        "Version": {
            "required": true,
            "type": "string"
        },
        "requestBody": {
            "description": "Represents the input of an <code>UpdateTable</code> operation.",
            "example": {
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 10,
                    "WriteCapacityUnits": 10
                },
                "TableName": "MusicCollection"
            },
            "properties": {
                "AttributeDefinitions": {
                    "description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.",
                    "items": {
                        "description": "Represents an attribute for describing the key schema for the table and indexes.",
                        "properties": {
                            "AttributeName": {
                                "description": "A name for the attribute.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "AttributeType": {
                                "description": "<p>The data type for the attribute, where:</p> <ul> <li> <p> <code>S</code> - the attribute is of type String</p> </li> <li> <p> <code>N</code> - the attribute is of type Number</p> </li> <li> <p> <code>B</code> - the attribute is of type Binary</p> </li> </ul>",
                                "enum": [
                                    "S",
                                    "N",
                                    "B"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "AttributeName",
                            "AttributeType"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "BillingMode": {
                    "description": "<p>Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.</p> <ul> <li> <p> <code>PROVISIONED</code> - Sets the billing mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p> </li> <li> <p> <code>PAY_PER_REQUEST</code> - Sets the billing mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. </p> </li> </ul>",
                    "enum": [
                        "PROVISIONED",
                        "PAY_PER_REQUEST"
                    ],
                    "type": "string"
                },
                "GlobalSecondaryIndexUpdates": {
                    "description": "<p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p> <ul> <li> <p> <code>Create</code> - add a new global secondary index to the table.</p> </li> <li> <p> <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p> </li> <li> <p> <code>Delete</code> - remove a global secondary index from the table.</p> </li> </ul> <p>For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html\">Managing Global Secondary Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>",
                    "items": {
                        "description": "<p>Represents one of the following:</p> <ul> <li> <p>A new global secondary index to be added to an existing table.</p> </li> <li> <p>New provisioned throughput parameters for an existing global secondary index.</p> </li> <li> <p>An existing global secondary index to be removed from an existing table.</p> </li> </ul>",
                        "properties": {
                            "Create": {
                                "description": "<p>The parameters required for creating a global secondary index on an existing table:</p> <ul> <li> <p> <code>IndexName </code> </p> </li> <li> <p> <code>KeySchema </code> </p> </li> <li> <p> <code>AttributeDefinitions </code> </p> </li> <li> <p> <code>Projection </code> </p> </li> <li> <p> <code>ProvisionedThroughput </code> </p> </li> </ul>",
                                "properties": {
                                    "IndexName": {
                                        "description": "The name of the global secondary index to be created.",
                                        "maxLength": 255,
                                        "minLength": 3,
                                        "pattern": "[a-zA-Z0-9_.-]+",
                                        "type": "string"
                                    },
                                    "KeySchema": {
                                        "description": "The key schema for the global secondary index.",
                                        "items": {
                                            "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>",
                                            "properties": {
                                                "AttributeName": {
                                                    "description": "The name of a key attribute.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "KeyType": {
                                                    "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB' usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>",
                                                    "enum": [
                                                        "HASH",
                                                        "RANGE"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "AttributeName",
                                                "KeyType"
                                            ],
                                            "type": "object"
                                        },
                                        "maxItems": 2,
                                        "minItems": 1,
                                        "type": "array"
                                    },
                                    "Projection": {
                                        "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.",
                                        "properties": {
                                            "NonKeyAttributes": {
                                                "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>",
                                                "items": {
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "maxItems": 20,
                                                "minItems": 1,
                                                "type": "array"
                                            },
                                            "ProjectionType": {
                                                "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes are in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>",
                                                "enum": [
                                                    "ALL",
                                                    "KEYS_ONLY",
                                                    "INCLUDE"
                                                ],
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "ProvisionedThroughput": {
                                        "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>",
                                        "properties": {
                                            "ReadCapacityUnits": {
                                                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                                                "minimum": 1,
                                                "type": "integer"
                                            },
                                            "WriteCapacityUnits": {
                                                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                                                "minimum": 1,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "ReadCapacityUnits",
                                            "WriteCapacityUnits"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "IndexName",
                                    "KeySchema",
                                    "Projection"
                                ],
                                "type": "object"
                            },
                            "Delete": {
                                "description": "The name of an existing global secondary index to be removed.",
                                "properties": {
                                    "IndexName": {
                                        "description": "The name of the global secondary index to be deleted.",
                                        "maxLength": 255,
                                        "minLength": 3,
                                        "pattern": "[a-zA-Z0-9_.-]+",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "IndexName"
                                ],
                                "type": "object"
                            },
                            "Update": {
                                "description": "The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.",
                                "properties": {
                                    "IndexName": {
                                        "description": "The name of the global secondary index to be updated.",
                                        "maxLength": 255,
                                        "minLength": 3,
                                        "pattern": "[a-zA-Z0-9_.-]+",
                                        "type": "string"
                                    },
                                    "ProvisionedThroughput": {
                                        "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Limits</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>",
                                        "properties": {
                                            "ReadCapacityUnits": {
                                                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                                                "minimum": 1,
                                                "type": "integer"
                                            },
                                            "WriteCapacityUnits": {
                                                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                                                "minimum": 1,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "ReadCapacityUnits",
                                            "WriteCapacityUnits"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "IndexName",
                                    "ProvisionedThroughput"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "type": "array"
                },
                "ProvisionedThroughput": {
                    "description": "The new provisioned throughput settings for the specified table or index.",
                    "properties": {
                        "ReadCapacityUnits": {
                            "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                            "minimum": 1,
                            "type": "integer"
                        },
                        "WriteCapacityUnits": {
                            "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>",
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    "required": [
                        "ReadCapacityUnits",
                        "WriteCapacityUnits"
                    ],
                    "type": "object"
                },
                "SSESpecification": {
                    "description": "The new server-side encryption settings for the specified table.",
                    "properties": {
                        "Enabled": {
                            "description": "Indicates whether server-side encryption is enabled (true) or disabled (false) on the table. If enabled (true), server-side encryption type is set to <code>KMS</code>. If disabled (false) or not specified, server-side encryption is set to AWS owned CMK.",
                            "type": "boolean"
                        },
                        "KMSMasterKeyId": {
                            "description": "The KMS Master Key (CMK) which should be used for the KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS Master Key alias/aws/dynamodb.",
                            "type": "string"
                        },
                        "SSEType": {
                            "description": "<p>Server-side encryption type:</p> <ul> <li> <p> <code>AES256</code> - Server-side encryption which uses the AES256 algorithm (not applicable).</p> </li> <li> <p> <code>KMS</code> - Server-side encryption which uses AWS Key Management Service. Key is stored in your account and is managed by AWS KMS (KMS charges apply).</p> </li> </ul>",
                            "enum": [
                                "AES256",
                                "KMS"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "StreamSpecification": {
                    "description": "<p>Represents the DynamoDB Streams configuration for the table.</p> <note> <p>You will receive a <code>ResourceInUseException</code> if you attempt to enable a stream on a table that already has a stream, or if you attempt to disable a stream on a table which does not have a stream.</p> </note>",
                    "properties": {
                        "StreamEnabled": {
                            "description": "Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.",
                            "type": "boolean"
                        },
                        "StreamViewType": {
                            "description": "<p> When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the stream for this table. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul>",
                            "enum": [
                                "NEW_IMAGE",
                                "OLD_IMAGE",
                                "NEW_AND_OLD_IMAGES",
                                "KEYS_ONLY"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "TableName": {
                    "description": "The name of the table to be updated.",
                    "maxLength": 255,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9_.-]+",
                    "type": "string"
                }
            },
            "required": [
                "TableName"
            ],
            "type": "object"
        },
        "X_Amz_Content_Sha256": {
            "required": false,
            "type": "string"
        },
        "X_Amz_Date": {
            "required": false,
            "type": "string"
        },
        "X_Amz_Algorithm": {
            "required": false,
            "type": "string"
        },
        "X_Amz_Credential": {
            "required": false,
            "type": "string"
        },
        "X_Amz_Security_Token": {
            "required": false,
            "type": "string"
        },
        "X_Amz_Signature": {
            "required": false,
            "type": "string"
        },
        "X_Amz_SignedHeaders": {
            "required": false,
            "type": "string"
        }
    }
}