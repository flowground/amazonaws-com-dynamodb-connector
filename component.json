{
    "title": "Amazon DynamoDB",
    "description": "Amazon DynamoDB Amazon DynamoDB is a fully managed NoSQL database service that\nprovides fast and predictable performance with seamless scalability. DynamoDB\nlets you offload the administrative burdens of operating and scaling a\ndistributed database, so that you don't have to worry about hardware\nprovisioning, setup and configuration, replication, software patching, or\ncluster scaling.\n\nWith DynamoDB, you can create database tables that can store and retrieve any\namount of data, and serve any level of request traffic. You can scale up or\nscale down your tables' throughput capacity without downtime or performance\ndegradation, and use the AWS Management Console to monitor resource utilization\nand performance metrics.\n\nDynamoDB automatically spreads the data and traffic for your tables over a\nsufficient number of servers to handle your throughput and storage requirements,\nwhile maintaining consistent and fast performance. All of your data is stored on\nsolid state disks (SSDs) and automatically replicated across multiple\nAvailability Zones in an AWS region, providing built-in high availability and\ndata durability.",
    "docsUrl": "https://docs.aws.amazon.com/dynamodb/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/dynamodb/2012-08-10/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://dynamodb.amazonaws.com/",
                    "http://dynamodb.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "BatchGetItem": {
            "main": "./lib/actions/BatchGetItem.js",
            "title": "BatchGetItem",
            "description": "The BatchGetItem operation returns the attributes of one or more items from one\nor more tables. You identify requested items by primary key.\n\nA single operation can retrieve up to 16 MB of data, which can contain as many\nas 100 items. BatchGetItem will return a partial result if the response size\nlimit is exceeded, the table's provisioned throughput is exceeded, or an\ninternal processing failure occurs. If a partial result is returned, the\noperation returns a value for UnprocessedKeys. You can use this value to retry\nthe operation starting with the next item to get.\n\nIf you request more than 100 items BatchGetItem will return a \nValidationException with the message \"Too many items requested for the\nBatchGetItem call\".\n\nFor example, if you ask to retrieve 100 items, but each individual item is 300\nKB in size, the system returns 52 items (so as not to exceed the 16 MB limit).\nIt also returns an appropriate UnprocessedKeys value so you can get the next\npage of results. If desired, your application can include its own logic to\nassemble the pages of results into one data set.\n\nIf none of the items can be processed due to insufficient provisioned throughput\non all of the tables in the request, then BatchGetItem will return a \nProvisionedThroughputExceededException. If at least one of the items is\nsuccessfully processed, then BatchGetItem completes successfully, while\nreturning the keys of the unread items in UnprocessedKeys.\n\nIf DynamoDB returns any unprocessed items, you should retry the batch operation\non those items. However, we strongly recommend that you use an exponential\nbackoff algorithm. If you retry the batch operation immediately, the underlying\nread or write requests can still fail due to throttling on the individual\ntables. If you delay the batch operation using exponential backoff, the\nindividual requests in the batch are much more likely to succeed.\n\nFor more information, see Batch Operations and Error Handling\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations] \nin the Amazon DynamoDB Developer Guide.\n\nBy default, BatchGetItem performs eventually consistent reads on every table in\nthe request. If you want strongly consistent reads instead, you can set \nConsistentRead to true for any or all tables.\n\nIn order to minimize response latency, BatchGetItem retrieves items in parallel.\n\nWhen designing your application, keep in mind that DynamoDB does not return\nitems in any particular order. To help parse the response by item, include the\nprimary key values for the items in your request in the ProjectionExpression \nparameter.\n\nIf a requested item does not exist, it is not returned in the result. Requests\nfor nonexistent items consume the minimum read capacity units according to the\ntype of read. For more information, see Capacity Units Calculations\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations] \nin the Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchGetItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "BatchWriteItem": {
            "main": "./lib/actions/BatchWriteItem.js",
            "title": "BatchWriteItem",
            "description": "The BatchWriteItem operation puts or deletes multiple items in one or more\ntables. A single call to BatchWriteItem can write up to 16 MB of data, which can\ncomprise as many as 25 put or delete requests. Individual items to be written\ncan be as large as 400 KB.\n\n BatchWriteItem cannot update items. To update items, use the UpdateItem action.\n\nThe individual PutItem and DeleteItem operations specified in BatchWriteItem are\natomic; however BatchWriteItem as a whole is not. If any requested operations\nfail because the table's provisioned throughput is exceeded or an internal\nprocessing failure occurs, the failed operations are returned in the \nUnprocessedItems response parameter. You can investigate and optionally resend\nthe requests. Typically, you would call BatchWriteItem in a loop. Each iteration\nwould check for unprocessed items and submit a new BatchWriteItem request with\nthose unprocessed items until all items have been processed.\n\nNote that if none of the items can be processed due to insufficient provisioned\nthroughput on all of the tables in the request, then BatchWriteItem will return\na ProvisionedThroughputExceededException.\n\nIf DynamoDB returns any unprocessed items, you should retry the batch operation\non those items. However, we strongly recommend that you use an exponential\nbackoff algorithm. If you retry the batch operation immediately, the underlying\nread or write requests can still fail due to throttling on the individual\ntables. If you delay the batch operation using exponential backoff, the\nindividual requests in the batch are much more likely to succeed.\n\nFor more information, see Batch Operations and Error Handling\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations] \nin the Amazon DynamoDB Developer Guide.\n\nWith BatchWriteItem, you can efficiently write or delete large amounts of data,\nsuch as from Amazon Elastic MapReduce (EMR), or copy data from another database\ninto DynamoDB. In order to improve performance with these large-scale\noperations, BatchWriteItem does not behave in the same way as individual PutItem \nand DeleteItem calls would. For example, you cannot specify conditions on\nindividual put and delete requests, and BatchWriteItem does not return deleted\nitems in the response.\n\nIf you use a programming language that supports concurrency, you can use threads\nto write items in parallel. Your application must include the necessary logic to\nmanage the threads. With languages that don't support threading, you must update\nor delete the specified items one at a time. In both situations, BatchWriteItem \nperforms the specified put and delete operations in parallel, giving you the\npower of the thread pool approach without having to introduce complexity into\nyour application.\n\nParallel processing reduces latency, but each specified put and delete request\nconsumes the same number of write capacity units whether it is processed in\nparallel or not. Delete operations on nonexistent items consume one write\ncapacity unit.\n\nIf one or more of the following is true, DynamoDB rejects the entire batch write\noperation:\n\n *  One or more tables specified in the BatchWriteItem request does not exist.\n   \n   \n *  Primary key attributes specified on an item in the request do not match\n   those in the corresponding table's primary key schema.\n   \n   \n *  You try to perform multiple operations on the same item in the same \n   BatchWriteItem request. For example, you cannot put and delete the same item\n   in the same BatchWriteItem request. \n   \n   \n *   Your request contains at least two items with identical hash and range keys\n   (which essentially is two put operations). \n   \n   \n *  There are more than 25 requests in the batch.\n   \n   \n *  Any individual item in a batch exceeds 400 KB.\n   \n   \n *  The total request size exceeds 16 MB.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/BatchWriteItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateBackup": {
            "main": "./lib/actions/CreateBackup.js",
            "title": "CreateBackup",
            "description": "Creates a backup for an existing table.\n\n Each time you create an On-Demand Backup, the entire table data is backed up.\nThere is no limit to the number of on-demand backups that can be taken. \n\n When you create an On-Demand Backup, a time marker of the request is cataloged,\nand the backup is created asynchronously, by applying all changes until the time\nof the request to the last full table snapshot. Backup requests are processed\ninstantaneously and become available for restore within minutes. \n\nYou can call CreateBackup at a maximum rate of 50 times per second.\n\nAll backups in DynamoDB work without consuming any provisioned throughput on the\ntable.\n\n If you submit a backup request on 2018-12-14 at 14:25:00, the backup is\nguaranteed to contain all data committed to the table up to 14:24:00, and data\ncommitted after 14:26:00 will not be. The backup may or may not contain data\nmodifications made between 14:24:00 and 14:26:00. On-Demand Backup does not\nsupport causal consistency. \n\n Along with data, the following are also included on the backups: \n\n *  Global secondary indexes (GSIs)\n   \n   \n *  Local secondary indexes (LSIs)\n   \n   \n *  Streams\n   \n   \n *  Provisioned read and write capacity",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateGlobalTable": {
            "main": "./lib/actions/CreateGlobalTable.js",
            "title": "CreateGlobalTable",
            "description": "Creates a global table from an existing table. A global table creates a\nreplication relationship between two or more DynamoDB tables with the same table\nname in the provided regions. \n\nIf you want to add a new replica table to a global table, each of the following\nconditions must be true:\n\n *  The table must have the same primary key as all of the other replicas.\n   \n   \n *  The table must have the same name as all of the other replicas.\n   \n   \n *  The table must have DynamoDB Streams enabled, with the stream containing\n   both the new and the old images of the item.\n   \n   \n *  None of the replica tables in the global table can contain any data.\n   \n   \n\n If global secondary indexes are specified, then the following conditions must\nalso be met: \n\n *   The global secondary indexes must have the same name. \n   \n   \n *   The global secondary indexes must have the same hash key and sort key (if\n   present). \n   \n   \n\n Write capacity settings should be set consistently across your replica tables\nand secondary indexes. DynamoDB strongly recommends enabling auto scaling to\nmanage the write capacity settings for all of your global tables replicas and\nindexes. \n\n If you prefer to manage write capacity settings manually, you should provision\nequal replicated write capacity units to your replica tables. You should also\nprovision equal replicated write capacity units to matching secondary indexes\nacross your global table.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateGlobalTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateTable": {
            "main": "./lib/actions/CreateTable.js",
            "title": "CreateTable",
            "description": "The CreateTable operation adds a new table to your account. In an AWS account,\ntable names must be unique within each region. That is, you can have two tables\nwith same name if you create the tables in different regions.\n\n CreateTable is an asynchronous operation. Upon receiving a CreateTable request,\nDynamoDB immediately returns a response with a TableStatus of CREATING. After\nthe table is created, DynamoDB sets the TableStatus to ACTIVE. You can perform\nread and write operations only on an ACTIVE table. \n\nYou can optionally define secondary indexes on the new table, as part of the \nCreateTable operation. If you want to create multiple tables with secondary\nindexes on them, you must create the tables sequentially. Only one table with\nsecondary indexes can be in the CREATING state at any given time.\n\nYou can use the DescribeTable action to check the table status.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteBackup": {
            "main": "./lib/actions/DeleteBackup.js",
            "title": "DeleteBackup",
            "description": "Deletes an existing backup of a table.\n\nYou can call DeleteBackup at a maximum rate of 10 times per second.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteItem": {
            "main": "./lib/actions/DeleteItem.js",
            "title": "DeleteItem",
            "description": "Deletes a single item in a table by primary key. You can perform a conditional\ndelete operation that deletes the item if it exists, or if it has an expected\nattribute value.\n\nIn addition to deleting an item, you can also return the item's attribute values\nin the same operation, using the ReturnValues parameter.\n\nUnless you specify conditions, the DeleteItem is an idempotent operation;\nrunning it multiple times on the same item or attribute does not result in an\nerror response.\n\nConditional deletes are useful for deleting items only if specific conditions\nare met. If those conditions are met, DynamoDB performs the delete. Otherwise,\nthe item is not deleted.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteTable": {
            "main": "./lib/actions/DeleteTable.js",
            "title": "DeleteTable",
            "description": "The DeleteTable operation deletes a table and all of its items. After a \nDeleteTable request, the specified table is in the DELETING state until DynamoDB\ncompletes the deletion. If the table is in the ACTIVE state, you can delete it.\nIf a table is in CREATING or UPDATING states, then DynamoDB returns a \nResourceInUseException. If the specified table does not exist, DynamoDB returns\na ResourceNotFoundException. If table is already in the DELETING state, no error\nis returned. \n\nDynamoDB might continue to accept data read and write operations, such as \nGetItem and PutItem, on a table in the DELETING state until the table deletion\nis complete.\n\nWhen you delete a table, any indexes on that table are also deleted.\n\nIf you have DynamoDB Streams enabled on the table, then the corresponding stream\non that table goes into the DISABLED state, and the stream is automatically\ndeleted after 24 hours.\n\nUse the DescribeTable action to check the status of the table.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeBackup": {
            "main": "./lib/actions/DescribeBackup.js",
            "title": "DescribeBackup",
            "description": "Describes an existing backup of a table.\n\nYou can call DescribeBackup at a maximum rate of 10 times per second.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeContinuousBackups": {
            "main": "./lib/actions/DescribeContinuousBackups.js",
            "title": "DescribeContinuousBackups",
            "description": "Checks the status of continuous backups and point in time recovery on the\nspecified table. Continuous backups are ENABLED on all tables at table creation.\nIf point in time recovery is enabled, PointInTimeRecoveryStatus will be set to\nENABLED.\n\n Once continuous backups and point in time recovery are enabled, you can restore\nto any point in time within EarliestRestorableDateTime and \nLatestRestorableDateTime. \n\n LatestRestorableDateTime is typically 5 minutes before the current time. You\ncan restore your table to any point in time during the last 35 days. \n\nYou can call DescribeContinuousBackups at a maximum rate of 10 times per second.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeContinuousBackups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeEndpoints": {
            "main": "./lib/actions/DescribeEndpoints.js",
            "title": "DescribeEndpoints",
            "description": "Returns the regional endpoint information.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeEndpoints.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGlobalTable": {
            "main": "./lib/actions/DescribeGlobalTable.js",
            "title": "DescribeGlobalTable",
            "description": "Returns information about the specified global table.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGlobalTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeGlobalTableSettings": {
            "main": "./lib/actions/DescribeGlobalTableSettings.js",
            "title": "DescribeGlobalTableSettings",
            "description": "Describes region specific settings for a global table.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeGlobalTableSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeLimits": {
            "main": "./lib/actions/DescribeLimits.js",
            "title": "DescribeLimits",
            "description": "Returns the current provisioned-capacity limits for your AWS account in a\nregion, both for the region as a whole and for any one DynamoDB table that you\ncreate there.\n\nWhen you establish an AWS account, the account has initial limits on the maximum\nread capacity units and write capacity units that you can provision across all\nof your DynamoDB tables in a given region. Also, there are per-table limits that\napply when you create a table there. For more information, see Limits\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html] \npage in the Amazon DynamoDB Developer Guide.\n\nAlthough you can increase these limits by filing a case at AWS Support Center\n[https://console.aws.amazon.com/support/home#/], obtaining the increase is not\ninstantaneous. The DescribeLimits action lets you write code to compare the\ncapacity you are currently using to those limits imposed by your account so that\nyou have enough time to apply for an increase before you hit a limit.\n\nFor example, you could use one of the AWS SDKs to do the following:\n\n 1.  Call DescribeLimits for a particular region to obtain your current account\n    limits on provisioned capacity there.\n    \n    \n 2.  Create a variable to hold the aggregate read capacity units provisioned for\n    all your tables in that region, and one to hold the aggregate write capacity\n    units. Zero them both.\n    \n    \n 3.  Call ListTables to obtain a list of all your DynamoDB tables.\n    \n    \n 4.  For each table name listed by ListTables, do the following:\n    \n     *  Call DescribeTable with the table name.\n       \n       \n     *  Use the data returned by DescribeTable to add the read capacity units and\n       write capacity units provisioned for the table itself to your variables.\n       \n       \n     *  If the table has one or more global secondary indexes (GSIs), loop over\n       these GSIs and add their provisioned capacity values to your variables as\n       well.\n       \n       \n    \n    \n 5.  Report the account limits for that region returned by DescribeLimits, along\n    with the total current provisioned capacity levels you have calculated.\n    \n    \n\nThis will let you see whether you are getting close to your account-level\nlimits.\n\nThe per-table limits apply only when you are creating a new table. They restrict\nthe sum of the provisioned capacity of the new table itself and all its global\nsecondary indexes.\n\nFor existing tables and their GSIs, DynamoDB will not let you increase\nprovisioned capacity extremely rapidly, but the only upper limit that applies is\nthat the aggregate provisioned capacity over all your tables and GSIs cannot\nexceed either of the per-account limits.\n\n DescribeLimits should only be called periodically. You can expect throttling\nerrors if you call it more than once in a minute.\n\nThe DescribeLimits Request element has no content.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeLimits.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTable": {
            "main": "./lib/actions/DescribeTable.js",
            "title": "DescribeTable",
            "description": "Returns information about the table, including the current status of the table,\nwhen it was created, the primary key schema, and any indexes on the table.\n\nIf you issue a DescribeTable request immediately after a CreateTable request,\nDynamoDB might return a ResourceNotFoundException. This is because DescribeTable \nuses an eventually consistent query, and the metadata for your table might not\nbe available at that moment. Wait for a few seconds, and then try the \nDescribeTable request again.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeTimeToLive": {
            "main": "./lib/actions/DescribeTimeToLive.js",
            "title": "DescribeTimeToLive",
            "description": "Gives a description of the Time to Live (TTL) status on the specified table. ",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeTimeToLive.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "GetItem": {
            "main": "./lib/actions/GetItem.js",
            "title": "GetItem",
            "description": "The GetItem operation returns a set of attributes for the item with the given\nprimary key. If there is no matching item, GetItem does not return any data and\nthere will be no Item element in the response.\n\n GetItem provides an eventually consistent read by default. If your application\nrequires a strongly consistent read, set ConsistentRead to true. Although a\nstrongly consistent read might take more time than an eventually consistent\nread, it always returns the last updated value.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/GetItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListBackups": {
            "main": "./lib/actions/ListBackups.js",
            "title": "ListBackups",
            "description": "List backups associated with an AWS account. To list backups for a given table,\nspecify TableName. ListBackups returns a paginated list of results with at most\n1MB worth of items in a page. You can also specify a limit for the maximum\nnumber of entries to be returned in a page. \n\nIn the request, start time is inclusive but end time is exclusive. Note that\nthese limits are for the time at which the original backup was requested.\n\nYou can call ListBackups a maximum of 5 times per second.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListBackups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListGlobalTables": {
            "main": "./lib/actions/ListGlobalTables.js",
            "title": "ListGlobalTables",
            "description": "Lists all global tables that have a replica in the specified region.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListGlobalTables.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTables": {
            "main": "./lib/actions/ListTables.js",
            "title": "ListTables",
            "description": "Returns an array of table names associated with the current account and endpoint. The output from <code>ListTables</code> is paginated, with each page returning a maximum of 100 table names.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTables.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListTagsOfResource": {
            "main": "./lib/actions/ListTagsOfResource.js",
            "title": "ListTagsOfResource",
            "description": "List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up\nto 10 times per second, per account.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html] \nin the Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListTagsOfResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "PutItem": {
            "main": "./lib/actions/PutItem.js",
            "title": "PutItem",
            "description": "Creates a new item, or replaces an old item with a new item. If an item that has\nthe same primary key as the new item already exists in the specified table, the\nnew item completely replaces the existing item. You can perform a conditional\nput operation (add a new item if one with the specified primary key doesn't\nexist), or replace an existing item if it has certain attribute values. You can\nreturn the item's attribute values in the same operation, using the ReturnValues \nparameter.\n\nThis topic provides general information about the PutItem API.\n\nFor information on how to call the PutItem API using the AWS SDK in specific\nlanguages, see the following:\n\n *   PutItem in the AWS Command Line Interface\n   [http://docs.aws.amazon.com/goto/aws-cli/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for .NET\n   [http://docs.aws.amazon.com/goto/DotNetSDKV3/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for C++\n   [http://docs.aws.amazon.com/goto/SdkForCpp/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for Go\n   [http://docs.aws.amazon.com/goto/SdkForGoV1/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for Java\n   [http://docs.aws.amazon.com/goto/SdkForJava/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for JavaScript\n   [http://docs.aws.amazon.com/goto/AWSJavaScriptSDK/dynamodb-2012-08-10/PutItem] \n    \n   \n   \n *   PutItem in the AWS SDK for PHP V3\n   [http://docs.aws.amazon.com/goto/SdkForPHPV3/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for Python\n   [http://docs.aws.amazon.com/goto/boto3/dynamodb-2012-08-10/PutItem] \n   \n   \n *   PutItem in the AWS SDK for Ruby V2\n   [http://docs.aws.amazon.com/goto/SdkForRubyV2/dynamodb-2012-08-10/PutItem] \n   \n   \n\nWhen you add an item, the primary key attribute(s) are the only required\nattributes. Attribute values cannot be null. String and Binary type attributes\nmust have lengths greater than zero. Set type attributes cannot be empty.\nRequests with empty values will be rejected with a ValidationException \nexception.\n\nTo prevent a new item from replacing an existing item, use a conditional\nexpression that contains the attribute_not_exists function with the name of the\nattribute being used as the partition key for the table. Since every record must\ncontain that attribute, the attribute_not_exists function will only succeed if\nno matching item exists.\n\nFor more information about PutItem, see Working with Items\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html] \nin the Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/PutItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Query": {
            "main": "./lib/actions/Query.js",
            "title": "Query",
            "description": "The Query operation finds items based on primary key values. You can query any\ntable or secondary index that has a composite primary key (a partition key and a\nsort key). \n\nUse the KeyConditionExpression parameter to provide a specific value for the\npartition key. The Query operation will return all of the items from the table\nor index with that partition key value. You can optionally narrow the scope of\nthe Query operation by specifying a sort key value and a comparison operator in \nKeyConditionExpression. To further refine the Query results, you can optionally\nprovide a FilterExpression. A FilterExpression determines which items within the\nresults should be returned to you. All of the other results are discarded. \n\n A Query operation always returns a result set. If no matching items are found,\nthe result set will be empty. Queries that do not return results consume the\nminimum number of read capacity units for that type of read operation. \n\n DynamoDB calculates the number of read capacity units consumed based on item\nsize, not on the amount of data that is returned to an application. The number\nof capacity units consumed will be the same whether you request all of the\nattributes (the default behavior) or just some of them (using a projection\nexpression). The number will also be the same whether or not you use a \nFilterExpression. \n\n Query results are always sorted by the sort key value. If the data type of the\nsort key is Number, the results are returned in numeric order; otherwise, the\nresults are returned in order of UTF-8 bytes. By default, the sort order is\nascending. To reverse the order, set the ScanIndexForward parameter to false. \n\n A single Query operation will read up to the maximum number of items set (if\nusing the Limit parameter) or a maximum of 1 MB of data and then apply any\nfiltering to the results using FilterExpression. If LastEvaluatedKey is present\nin the response, you will need to paginate the result set. For more information,\nsee Paginating the Results\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination] \nin the Amazon DynamoDB Developer Guide. \n\n FilterExpression is applied after a Query finishes, but before the results are\nreturned. A FilterExpression cannot contain partition key or sort key\nattributes. You need to specify those attributes in the KeyConditionExpression. \n\n A Query operation can return an empty result set and a LastEvaluatedKey if all\nthe items read for the page of results are filtered out. \n\nYou can query a table, a local secondary index, or a global secondary index. For\na query on a table or on a local secondary index, you can set the ConsistentRead \nparameter to true and obtain a strongly consistent result. Global secondary\nindexes support eventually consistent reads only, so do not specify \nConsistentRead when querying a global secondary index.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Query.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RestoreTableFromBackup": {
            "main": "./lib/actions/RestoreTableFromBackup.js",
            "title": "RestoreTableFromBackup",
            "description": "Creates a new table from an existing backup. Any number of users can execute up\nto 4 concurrent restores (any type of restore) in a given account. \n\nYou can call RestoreTableFromBackup at a maximum rate of 10 times per second.\n\nYou must manually set up the following on the restored table:\n\n *  Auto scaling policies\n   \n   \n *  IAM policies\n   \n   \n *  Cloudwatch metrics and alarms\n   \n   \n *  Tags\n   \n   \n *  Stream settings\n   \n   \n *  Time to Live (TTL) settings",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RestoreTableFromBackup.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "RestoreTableToPointInTime": {
            "main": "./lib/actions/RestoreTableToPointInTime.js",
            "title": "RestoreTableToPointInTime",
            "description": "Restores the specified table to the specified point in time within \nEarliestRestorableDateTime and LatestRestorableDateTime. You can restore your\ntable to any point in time during the last 35 days. Any number of users can\nexecute up to 4 concurrent restores (any type of restore) in a given account. \n\n When you restore using point in time recovery, DynamoDB restores your table\ndata to the state based on the selected date and time (day:hour:minute:second)\nto a new table. \n\n Along with data, the following are also included on the new restored table\nusing point in time recovery: \n\n *  Global secondary indexes (GSIs)\n   \n   \n *  Local secondary indexes (LSIs)\n   \n   \n *  Provisioned read and write capacity\n   \n   \n *  Encryption settings\n   \n    All these settings come from the current settings of the source table at the\n   time of restore. \n   \n   \n\nYou must manually set up the following on the restored table:\n\n *  Auto scaling policies\n   \n   \n *  IAM policies\n   \n   \n *  Cloudwatch metrics and alarms\n   \n   \n *  Tags\n   \n   \n *  Stream settings\n   \n   \n *  Time to Live (TTL) settings\n   \n   \n *  Point in time recovery settings",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/RestoreTableToPointInTime.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "Scan": {
            "main": "./lib/actions/Scan.js",
            "title": "Scan",
            "description": "The Scan operation returns one or more items and item attributes by accessing\nevery item in a table or a secondary index. To have DynamoDB return fewer items,\nyou can provide a FilterExpression operation.\n\nIf the total number of scanned items exceeds the maximum data set size limit of\n1 MB, the scan stops and results are returned to the user as a LastEvaluatedKey \nvalue to continue the scan in a subsequent operation. The results also include\nthe number of items exceeding the limit. A scan can result in no table data\nmeeting the filter criteria. \n\nA single Scan operation will read up to the maximum number of items set (if\nusing the Limit parameter) or a maximum of 1 MB of data and then apply any\nfiltering to the results using FilterExpression. If LastEvaluatedKey is present\nin the response, you will need to paginate the result set. For more information,\nsee Paginating the Results\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination] \nin the Amazon DynamoDB Developer Guide. \n\n Scan operations proceed sequentially; however, for faster performance on a\nlarge table or secondary index, applications can request a parallel Scan \noperation by providing the Segment and TotalSegments parameters. For more\ninformation, see Parallel Scan\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan] \nin the Amazon DynamoDB Developer Guide.\n\n Scan uses eventually consistent reads when accessing the data in a table;\ntherefore, the result set might not include the changes to data in the table\nimmediately before the operation began. If you need a consistent copy of the\ndata, as of the time that the Scan begins, you can set the ConsistentRead \nparameter to true.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/Scan.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TagResource": {
            "main": "./lib/actions/TagResource.js",
            "title": "TagResource",
            "description": "Associate a set of tags with an Amazon DynamoDB resource. You can then activate\nthese user-defined tags so that they appear on the Billing and Cost Management\nconsole for cost allocation tracking. You can call TagResource up to 5 times per\nsecond, per account. \n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html] \nin the Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TransactGetItems": {
            "main": "./lib/actions/TransactGetItems.js",
            "title": "TransactGetItems",
            "description": " TransactGetItems is a synchronous operation that atomically retrieves multiple\nitems from one or more tables (but not from indexes) in a single account and\nregion. A TransactGetItems call can contain up to 10 TransactGetItem objects,\neach of which contains a Get structure that specifies an item to retrieve from a\ntable in the account and region. A call to TransactGetItems cannot retrieve\nitems from tables in more than one AWS account or region.\n\nDynamoDB rejects the entire TransactGetItems request if any of the following is\ntrue:\n\n *  A conflicting operation is in the process of updating an item to be read.\n   \n   \n *  There is insufficient provisioned capacity for the transaction to be\n   completed.\n   \n   \n *  There is a user error, such as an invalid data format.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TransactGetItems.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "TransactWriteItems": {
            "main": "./lib/actions/TransactWriteItems.js",
            "title": "TransactWriteItems",
            "description": " TransactWriteItems is a synchronous write operation that groups up to 10 action\nrequests. These actions can target items in different tables, but not in\ndifferent AWS accounts or regions, and no two actions can target the same item.\nFor example, you cannot both ConditionCheck and Update the same item.\n\nThe actions are completed atomically so that either all of them succeed, or all\nof them fail. They are defined by the following objects:\n\n *   Put -- Initiates a PutItem operation to write a new item. This structure\n   specifies the primary key of the item to be written, the name of the table to\n   write it in, an optional condition expression that must be satisfied for the\n   write to succeed, a list of the item's attributes, and a field indicating\n   whether or not to retrieve the item's attributes if the condition is not met.\n   \n   \n *   Update -- Initiates an UpdateItem operation to update an existing item. This\n   structure specifies the primary key of the item to be updated, the name of\n   the table where it resides, an optional condition expression that must be\n   satisfied for the update to succeed, an expression that defines one or more\n   attributes to be updated, and a field indicating whether or not to retrieve\n   the item's attributes if the condition is not met.\n   \n   \n *   Delete -- Initiates a DeleteItem operation to delete an existing item. This\n   structure specifies the primary key of the item to be deleted, the name of\n   the table where it resides, an optional condition expression that must be\n   satisfied for the deletion to succeed, and a field indicating whether or not\n   to retrieve the item's attributes if the condition is not met.\n   \n   \n *   ConditionCheck -- Applies a condition to an item that is not being modified\n   by the transaction. This structure specifies the primary key of the item to\n   be checked, the name of the table where it resides, a condition expression\n   that must be satisfied for the transaction to succeed, and a field indicating\n   whether or not to retrieve the item's attributes if the condition is not met.\n   \n   \n\nDynamoDB rejects the entire TransactWriteItems request if any of the following\nis true:\n\n *  A condition in one of the condition expressions is not met.\n   \n   \n *  A conflicting operation is in the process of updating the same item.\n   \n   \n *  There is insufficient provisioned capacity for the transaction to be\n   completed.\n   \n   \n *  An item size becomes too large (bigger than 400 KB), a Local Secondary Index\n   (LSI) becomes too large, or a similar validation error occurs because of\n   changes made by the transaction.\n   \n   \n *  There is a user error, such as an invalid data format.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/TransactWriteItems.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UntagResource": {
            "main": "./lib/actions/UntagResource.js",
            "title": "UntagResource",
            "description": "Removes the association of tags from an Amazon DynamoDB resource. You can call\nUntagResource up to 5 times per second, per account. \n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html] \nin the Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UntagResource.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateContinuousBackups": {
            "main": "./lib/actions/UpdateContinuousBackups.js",
            "title": "UpdateContinuousBackups",
            "description": " UpdateContinuousBackups enables or disables point in time recovery for the\nspecified table. A successful UpdateContinuousBackups call returns the current \nContinuousBackupsDescription. Continuous backups are ENABLED on all tables at\ntable creation. If point in time recovery is enabled, PointInTimeRecoveryStatus \nwill be set to ENABLED.\n\n Once continuous backups and point in time recovery are enabled, you can restore\nto any point in time within EarliestRestorableDateTime and \nLatestRestorableDateTime. \n\n LatestRestorableDateTime is typically 5 minutes before the current time. You\ncan restore your table to any point in time during the last 35 days..",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateContinuousBackups.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateGlobalTable": {
            "main": "./lib/actions/UpdateGlobalTable.js",
            "title": "UpdateGlobalTable",
            "description": "Adds or removes replicas in the specified global table. The global table must\nalready exist to be able to use this operation. Any replica to be added must be\nempty, must have the same name as the global table, must have the same key\nschema, and must have DynamoDB Streams enabled and must have same provisioned\nand maximum write capacity units.\n\nAlthough you can use UpdateGlobalTable to add replicas and remove replicas in a\nsingle request, for simplicity we recommend that you issue separate requests for\nadding or removing replicas.\n\n If global secondary indexes are specified, then the following conditions must\nalso be met: \n\n *   The global secondary indexes must have the same name. \n   \n   \n *   The global secondary indexes must have the same hash key and sort key (if\n   present). \n   \n   \n *   The global secondary indexes must have the same provisioned and maximum\n   write capacity units.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateGlobalTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateGlobalTableSettings": {
            "main": "./lib/actions/UpdateGlobalTableSettings.js",
            "title": "UpdateGlobalTableSettings",
            "description": "Updates settings for a global table.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateGlobalTableSettings.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateItem": {
            "main": "./lib/actions/UpdateItem.js",
            "title": "UpdateItem",
            "description": "Edits an existing item's attributes, or adds a new item to the table if it does\nnot already exist. You can put, delete, or add attribute values. You can also\nperform a conditional update on an existing item (insert a new attribute\nname-value pair if it doesn't exist, or replace an existing name-value pair if\nit has certain expected attribute values).\n\nYou can also return the item's attribute values in the same UpdateItem operation\nusing the ReturnValues parameter.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateItem.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateTable": {
            "main": "./lib/actions/UpdateTable.js",
            "title": "UpdateTable",
            "description": "Modifies the provisioned throughput settings, global secondary indexes, or\nDynamoDB Streams settings for a given table.\n\nYou can only perform one of the following operations at once:\n\n *  Modify the provisioned throughput settings of the table.\n   \n   \n *  Enable or disable Streams on the table.\n   \n   \n *  Remove a global secondary index from the table.\n   \n   \n *  Create a new global secondary index on the table. Once the index begins\n   backfilling, you can use UpdateTable to perform other operations.\n   \n   \n\n UpdateTable is an asynchronous operation; while it is executing, the table\nstatus changes from ACTIVE to UPDATING. While it is UPDATING, you cannot issue\nanother UpdateTable request. When the table returns to the ACTIVE state, the \nUpdateTable operation is complete.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateTable.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateTimeToLive": {
            "main": "./lib/actions/UpdateTimeToLive.js",
            "title": "UpdateTimeToLive",
            "description": "The UpdateTimeToLive method will enable or disable TTL for the specified table.\nA successful UpdateTimeToLive call returns the current TimeToLiveSpecification;\nit may take up to one hour for the change to fully process. Any additional \nUpdateTimeToLive calls for the same table during this one hour duration result\nin a ValidationException. \n\nTTL compares the current time in epoch time format to the time stored in the TTL\nattribute of an item. If the epoch time value stored in the attribute is less\nthan the current time, the item is marked as expired and subsequently deleted.\n\n The epoch time format is the number of seconds elapsed since 12:00:00 AM\nJanuary 1st, 1970 UTC. \n\nDynamoDB deletes expired items on a best-effort basis to ensure availability of\nthroughput for other data operations. \n\nDynamoDB typically deletes expired items within two days of expiration. The\nexact duration within which an item gets deleted after expiration is specific to\nthe nature of the workload. Items that have expired and not been deleted will\nstill show up in reads, queries, and scans.\n\nAs items are deleted, they are removed from any Local Secondary Index and Global\nSecondary Index immediately in the same eventually consistent way as a standard\ndelete operation.\n\nFor more information, see Time To Live\n[http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html] in\nthe Amazon DynamoDB Developer Guide.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateTimeToLive.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}